# -*- coding: utf-8 -*-
"""cnn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1THq_8u_68NWta0QRb99n95IiuqgK0UFg
"""

import torch
import torch.nn as nn
import torch.optim as optim
import torch.utils.data as Data
import torchvision
import torch.nn.functional as F
import matplotlib.pyplot as plt
import time

trainset = torchvision.datasets.MNIST(root='./data', train=True, download=True,
                                      transform=torchvision.transforms.Compose([
                                          torchvision.transforms.ToTensor(),
                                          torchvision.transforms.Normalize(
                                              (0.1307,), (0.3081,))
                                      ]))
testset = torchvision.datasets.MNIST(root='./data', train=False, download=True,
                                      transform=torchvision.transforms.Compose([
                                          torchvision.transforms.ToTensor(),
                                          torchvision.transforms.Normalize(
                                              (0.1307,), (0.3081,))
                                      ]))
BATCH_SIZE = 32

class Net_web(torch.nn.Module):
    def __init__(self):
        super(Net_web, self).__init__()
        self.conv = nn.Conv2d(1, 20, 3, 1)
        self.maxpool = nn.MaxPool2d(2, 1)
        self.fc1 = nn.Linear(25*25*20, 128)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        x = self.conv(x)
        x = self.maxpool(x)
        x = F.relu(x)
        x = x.view(-1, 25*25*20)
        x = self.fc1(x)
        x = F.relu(x)
        x = self.fc2(x)
        return x

test_loader = Data.DataLoader(dataset=testset, batch_size=BATCH_SIZE, shuffle=True)

def train(Epoc):
    the_net.train()
    time_Epoc = 0
    for batch_idx, (data, target) in enumerate(train_loader):
        optimizer.zero_grad()
        output = the_net(data)
        loss = F.cross_entropy(output, target)
        loss.backward()
        optimizer.step()
        if batch_idx % 500 == 0:
            print('Train Epoc: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                Epoc, batch_idx * len(data), len(train_loader.dataset),
                100. * batch_idx / len(train_loader), loss.item()))

'''
Compute average loss over the whole dataset.
'''


def get_train_loss():
    the_net.eval()
    train_loss = 0
    with torch.no_grad():
        for batch_idx, (data, target) in enumerate(train_loader):
            output = the_net(data)
            train_loss += F.cross_entropy(output, target, reduction='sum')
    return train_loss / len(train_loader.dataset)


test_losses = []  # empty array for test losses
accuracies = []

def test():
  the_net.eval()
  test_loss = 0
  correct = 0
  with torch.no_grad():
    for data, target in test_loader:
      output = the_net(data)
      test_loss += F.cross_entropy(output, target, reduction='sum').item()
      pred = output.data.max(1, keepdim=True)[1]
      correct += pred.eq(target.data.view_as(pred)).sum().item()
  accuracies.append(correct / len(test_loader.dataset))
  test_losses.append(test_loss)
  print('\nTest set: Avg. loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
    test_loss, correct, len(test_loader.dataset),
    100. * correct / len(test_loader.dataset)))

train_loader = Data.DataLoader(dataset=trainset, batch_size=32, shuffle=True)
the_net = Net_web()
optimizer = optim.Adam(the_net.parameters(), lr=0.01)
train_loss_ADAM = []
tolerance = 1e-3


loss_previous = 1e10
Epoc = 1 # Epoc number
train(Epoc)
loss_next = get_train_loss()
while(loss_previous - loss_next > tolerance):
  train_loss_ADAM.append(loss_next)
  Epoc += 1
  train(Epoc)
  loss_previous = loss_next
  loss_next = get_train_loss()
  train_loss_ADAM.append(loss_next)

train_loader = Data.DataLoader(dataset=trainset, batch_size=32, shuffle=True)
maxEpoc = 10

# ADAM
the_net = Net_web()
optimizer = optim.Adam(the_net.parameters(), lr=1e-3)
train_loss_Adam = []
tolerance = 1e-3

loss_previous = 1e10
Epoc = 1  # Epoc number
train(Epoc)
loss_next = get_train_loss()
while (loss_previous - loss_next > tolerance or loss_previous - loss_next < 0) and Epoc < maxEpoc:
    train_loss_Adam.append(loss_next)
    Epoc += 1
    train(Epoc)
    loss_previous = loss_next
    loss_next = get_train_loss()
    Epoc < maxEpoc

print(train_loss_Adam)
plt.plot(train_loss_Adam, label='Adam')

# SGD
the_net.__init__()
optimizer = optim.SGD(the_net.parameters(), lr=1e-3)
train_loss_SGD = []
tolerance = 1e-3

loss_previous = 1e10
Epoc = 1  # Epoc number
train(Epoc)
loss_next = get_train_loss()
while (loss_previous - loss_next > tolerance or loss_previous - loss_next < 0) and Epoc < maxEpoc:
    train_loss_SGD.append(loss_next)
    Epoc += 1
    train(Epoc)
    loss_previous = loss_next
    loss_next = get_train_loss()

print(train_loss_SGD)
plt.plot(train_loss_SGD,'b-', label='SGD')

# AdaGRAD
the_net.__init__()
optimizer = optim.Adagrad(the_net.parameters(), lr=1e-3)
train_loss_adagrad = []
tolerance = 1e-3

loss_previous = 1e10
Epoc = 1  # Epoc number
train(Epoc)
loss_next = get_train_loss()
while (loss_previous - loss_next > tolerance or loss_previous - loss_next < 0) and Epoc < maxEpoc:
    train_loss_adagrad.append(loss_next)
    Epoc += 1
    train(Epoc)
    loss_previous = loss_next
    loss_next = get_train_loss()

print(train_loss_adagrad)
plt.plot(train_loss_adagrad, label='adagrad')

plt.plot(train_loss_SGD,'r--', label='SGD')
plt.plot(train_loss_Adam,'y*-', label='Adam')
plt.plot(train_loss_adagrad, label='adagrad')
plt.legend()
plt.show()

Batches = [32, 64, 96, 128]
conv_time = [0] * (len(Batches))

the_net = Net_web()

for i in range(len(Batches)):
  the_net.__init__() # re-initialize all parameters to gurantee an untrained model
  optimizer = optim.SGD(the_net.parameters(), lr=1e-3)
  print('Starting training with batch size = {}'.format(Batches[i]))
  train_loader = Data.DataLoader(dataset=trainset, batch_size=Batches[i], shuffle=True)
  tolerance = 1e-3
  loss_previous = 1e10
  Epoc = 1 # Epoc number

  start_time = time.time() # start time

  train(Epoc)
  loss_next = get_train_loss()
  while(loss_previous - loss_next > tolerance):
    Epoc += 1
    train(Epoc)
    loss_previous = loss_next
    loss_next = get_train_loss()
  conv_time[i] = time.time() - start_time

plt.plot(Batches, conv_time)
plt.title('Convergence time')
plt.xlabel('Batch size')
plt.ylabel('time (s)')
plt.show()
